{
    "Nodejs-import-":{
        "prefix": "rq",
        "body": [
           "require('$0');"
        ]
    },
    "Nodejs-import-fs":{
        "prefix": "fsimport",
        "body": [
           "import fs from 'fs';"
        ]
    },
    "Nodejs-import-path":{
        "prefix": "pathimport",
        "body": [
           "import path from 'path';"
        ]
    },
    "Nodejs-import-express":{
        "prefix": "expressimport",
        "body": [
           "import express from 'express';"
        ]
    },
    "Nodejs-import-morgan":{
        "prefix": "morganimport",
        "body": [
           "import morgan from 'morgan';"
        ]
    },
    "Nodejs-import-rimraf":{
        "prefix": "rimrafimport",
        "body": [
           "import rimraf from 'rimraf';"
        ]
    },
    "Nodejs-import-remove":{
        "prefix": "removeimport",
        "body": [
           "import remove from 'remove';"
        ]
    },
    "Nodejs-import-mongoose":{
        "prefix": "mongooseimport",
        "body": [
           "import mongoose from 'mongoose';"
        ]
    },
    "Nodejs-import-mysql":{
        "prefix": "mysqlimport",
        "body": [
           "import mysql from 'mysql';"
        ]
    },
    "Nodejs-import-pg":{
        "prefix": "pgimport",
        "body": [
           "import pg from 'pg';"
        ]
    },
    "Nodejs-import-puppeteer":{
        "prefix": "puppeteerimport",
        "body": [
           "import puppeteer from 'puppeteer';"
        ]
    },
    "Nodejs-import-nodemailer":{
        "prefix": "nodemailerimport",
        "body": [
           "import nodemailer from 'nodemailer';"
        ]
    },
    "Nodejs-appexpress":{
        "prefix": "appexpress",
        "body": [
           "const app = express();"
        ]
    },
    "Nodejs-dotenv":{
        "prefix": "dotenv",
        "body": [
           "dotenv.config();"
        ]
    },
    "Nodejs-import-bcrypt":{
        "prefix": "bcryptimport",
        "body": [
           "import bcrypt from 'bcrypt';"
        ]
    },
    "Nodejs-import-jsonwebtoken":{
        "prefix": "jsonwebtokenimport",
        "body": [
           "import jwt from 'jsonwebtoken';"
        ]
    },
    "Nodejs-import-axios":{
        "prefix": "axiosimport",
        "body": [
           "import axios from 'axios';"
        ]
    },
    "Nodejs-import-async":{
        "prefix": "asyncimport",
        "body": [
           "import async from 'async';"
        ]
    },
    "Nodejs-appexpressRouter":{
        "prefix": "appRouter",
        "body": [
           "const router = express.Router();"
        ]
    },
    "Nodejs-schemaMongoose":{
        "prefix": "schemaMongoose",
        "body": [
           "import mongoose from 'mongoose';",
           "const Schema = mongoose.Schema;",
           " ",
           " ",
           "const userSchema = new Schema({",
           "    name:String,",
           "    surname:String",
           "    $0",
           "});",
           " ",
           "export const User = mongoose.model('User', userSchema);"
        ]
    },
    "Nodejs-appListen":{
        "prefix": "appListen",
        "body": [
          "app.listen(port, () => console.log(`server running on http://localhost:port`));"
        ]
    },
    "Nodejs-appPost":{
        "prefix": "routerRequest",
        "body": [
          "router.$1('/$2', async (req, res):Promise<void> => {",
          "    try{",
          "        $0",
          "    } catch(err:any){",
          "        console.log(err);",
          "        res.send({message: 'error'})",
          "    }",
          "});"
        ]
    },
    "Nodejs-module-exports":{
        "prefix": "mex",
        "body": [
            "module.exports = $0;"
        ]
    },
    "Nodejs-error-find":{
        "prefix": "err",
        "body": [
         "(err:Error, data:$1):void => {",
         "    if(err) throw err",   
         "    $0",
         "}"
        ]
    },
    "Nodejs-app.use":{
        "prefix": "use",
        "body": [
            "router.use('/$1', require('$0'))"
        ]
    },
    "Nodejs-fsfunc":{
        "prefix": "fsfunc",
        "body": [
            "fs.$1(path.join(__dirname, './', '$0'))"
        ]
    },
    "Nodejs-server":{
        "prefix": "server",
        "body": [
            "import dotenv from 'dotenv'",
            "dotenv.config();",
            "import express from 'express';",
            "import morgan from 'morgan';",
            "import cors from 'cors'",
            "import { graphqlHTTP } from 'express-graphql';",
            "import { client } from './model/postgres'",
            "import { schema } from './schema/schema';",
            "import { sequelize } from './model/postgres';",
            "const app = express();",
            "const port:string | number = process.env.PORT ?? 8888;",
            "",
            "",
            "sequelize.authenticate().then(res => console.log('DB connected')).catch(err => console.log(err));",
            "",
            "",
            "app.use(cors());",
            "app.use(morgan(`dev`));",
            "app.use(express.json());",
            "app.use(express.urlencoded({",
            "   extended: false",
            "}));",
            "",
            "app.use('/graphql',graphqlHTTP({",
            "    schema,",
            "    graphiql:true",
            "}));",
            "$0",
            "",
            "",
            "app.listen(port, () => console.log(`server is runnig on http://localhost:$1`));"
        ]
    },
    "Nodejs-nodemailer":{
        "prefix": "nodemailer",
        "body": [
            "import nodemailer from 'nodemailer';",
            "",
            "const transporter = nodemailer.createTransport(",
            "    {",
            "        host: \"smtp.mail.ru\",",
            "        port: 465,",
            "        secure: true, // if 465 true else false",
            "        auth: {",
            "            user: \"\",",
            "            pass: \"\",",
            "        },",
            "    }",
            "    {",
            "        from: \"\",",
            "    },",
            ");",
            "",
            "export const mailer = (message:):void => {",
            "    transporter.sendMail(message, (err:Error):void => {",
            "        if (err) {",
            "            console.log('error to send email')",                   
            "        };",
            "    });",
            "};"
        ]
    },
    "Nodejs-rout":{
        "prefix": "router",
        "body": [
            "import express from 'express';",
            "const router = express.Router();",
            "        ",
            "router.post('/', async (req, res):Promise<void> => {",
            "    try{",
            "        $0",
            "    } catch(err:any){",
            "        console.log(err);",
            "        res.send({message:'error'})",
            "    }",
            "});",
            "",
            "module.exports = router;"
        ]
    },
    "Nodejs-bcrypt-compare":{
        "prefix": "comparebcrypt",
        "body": [
            "const $1 = await bcrypt.compare($0, );"
        ]
    },
    "Nodejs-bcrypt-hash":{
        "prefix": "hashbcrypt",
        "body": [
            "const $1 = await bcrypt.hash($0, 10);"
        ]
    },
    "Nodejs-mysql":{
        "prefix": "mysql",
        "body": [
            "import mysql from 'mysql';",
            "",
            "",
            "export const conn = mysql.createConnection({",
            "    host:'localhost',",
            "    user:process.env.mysqlUser,",
            "    database:process.env.mysqlDB,",
            "    password:process.env.mysqlPassword",
            "})"
        ]
    },
    "Nodejs-mysqlconnection":{
        "prefix": "mysqlconnection",
        "body": [
            "conn.connect((err:Error):void => {",
            "    if(err) throw err;",
            "    console.log('mysqlDB connected');",
            "});"
        ]
    },
    "Nodejs-querymysql":{
        "prefix": "mysqlquery",
        "body": [
            "const $1 = await conn.query($0);"
        ]
    },

    "Nodejs-postgreSQL":{
        "prefix": "postgres",
        "body": [
            "import { Client } from 'pg';",
            "",
            "export const client = new Client({",
            "    database:process.env.postgresDBname,",
            "    password:process.env.postgresDBpassword,",
            "    port:5432,",
            "    host:'localhost',",
            "    user:'postgres',",
            "});"
        ]
    },
    "Nodejs-postgresconnection":{
        "prefix": "postgresconnection",
        "body": [
            "client.connect((err:Error):void => {",
            "    if(err) throw err;",
            "    console.log('postgresDB connected');",
            "});"
        ]
    },
    "Nodejs-querypostgres":{
        "prefix": "postgresquery",
        "body": [
            "const $1 = await client.query($0);"
        ]
    },
    "Nodejs-Sequelize":{
        "prefix": "sqconnect",
        "body": [
            "import { Sequelize, DataTypes} from 'sequelize';",
            "",
            "",
            "export const sequelize = new Sequelize(process.env.DBNAME,process.env.DBUSERNAME,process.env.DBPASSWORD,{",
            "    host:'127.0.0.1',",
            "    dialect:'$0'",
            "});"
        ]
    },
    "Nodejs-Sequelize-define":{
        "prefix": "sqdefine",
        "body": [
            "export const $1 = sequelize.define('$2', {",
            "    $0",
            "});"
        ]
    },
    "Nodejs-Sequelize-type":{
        "prefix": "sqtype",
        "body": [
            "{",
            "    type:DataTypes.$0",
            "},"
        ]
    },
    "Nodejs-Sequelize-findOne":{
        "prefix": "sqfindOne",
        "body": [
            "let data: any = await $1.findOne({ where: { $0 } });"
        ]
    },
    "Nodejs-Sequelize-update":{
        "prefix": "squpdate",
        "body": [
            "await $1.update({$0}, {where:{});"
        ]
    },
    "Nodejs-Sequelize-create":{
        "prefix": "sqcreate",
        "body": [
            "await $1.create({$0});"
        ]
    },
    "Nodejs-Sequelize-findAll":{
        "prefix": "sqfindAll",
        "body": [
            "const data = await $0.findAll();"
        ]
    },
    "Nodejs-Sequelize-destroy":{
        "prefix": "sqdestroy",
        "body": [
            "await $1.destroy({where:{ $0 }});"
        ]
    },
    "Nodejs-Response":{
        "prefix": ".send",
        "body": [
            "res.send({message:\"$1\"})"
        ]
    }
}
